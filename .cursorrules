# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- For Google Generative AI, use 'gemini-1.5-flash' as the model name for Gemini 2.0 Flash model
- In Next.js 14+, themeColor metadata should be moved from the metadata export to the viewport export to avoid warnings
- When working with environment variables in Next.js, use NEXT_PUBLIC_ prefix for client-side variables
- For better SEO, include comprehensive metadata with Open Graph and Twitter cards
- Always secure API keys by using environment variables and never commit them to the repository

# Scratchpad

## Blog Generator Website with Gemini API

### Task Description
Create a minimalist and visually appealing website that uses the Gemini Free API to generate blog posts based on user input.

### Plan
[X] Set up the project structure
[X] Install necessary dependencies (for Gemini API)
[X] Create the UI components:
  [X] User input section with text field and generate button
  [X] Blog output section with copy buttons for each section
  [X] Toggle for light/dark mode
[X] Implement the Gemini API integration
[X] Add loading animation and error handling
[X] Style the application with a minimalist black-and-white theme
[X] Test the application
[X] Update to use Gemini 2.0 Flash model
[X] Change format to generate full blog without section headings and add a single copy button
[X] Transform UI to a futuristic black theme with animations and gradient effects
[X] Make blog post background translucent with floating animations and remove theme toggle
[X] Refine UI: Remove animations from blog background, improve input section, increase font sizes
[X] Final touches: Make copy buttons smaller and transparent, rename website to AILOG
[X] Polish: Update website description, add copyright footer, customize scrollbar
[X] Enhance: Configure Gemini API to generate content in simple, easy-to-understand English
[X] SEO Optimization:
  [X] Add comprehensive metadata with Open Graph and Twitter cards
  [X] Create sitemap.xml and robots.txt
  [X] Add structured data (JSON-LD)
  [X] Create About page for better site structure
  [X] Add FAQ section for SEO
  [X] Update Gemini prompt to generate SEO-friendly content
  [X] Add accessibility attributes (aria-labels)
[X] Final Project Setup:
  [X] Secure API key using environment variables
  [X] Create LICENSE file with MIT license
  [X] Create README.md file with project documentation
  [X] Update domain to ailog.vercel.app
[X] Mobile Optimization:
  [X] Fix clipboard functionality on mobile devices
  [X] Add device detection utilities
  [X] Implement fallback copy methods
  [X] Add mobile-specific UI elements for better UX
[X] UI Refinements:
  [X] Further reduce clipboard button size
  [X] Remove floating animations from generated content for cleaner appearance
  [X] Reduce spacing between paragraphs and elements for more compact content
  [X] Standardize clipboard button styling across title and content
[X] Branding:
  [X] Add simple triangle favicon with blue-purple gradient
  [X] Generate both SVG and PNG versions for better browser compatibility
[X] Final Review and GitHub Push:
  [X] Create OG images for social media sharing
  [X] Update package.json with new dependencies
  [X] Create comprehensive README.md
  [X] Secure API keys with environment variables
  [X] Prepare repository for GitHub push

### API Key
- Gemini API Key: Stored securely in .env.local file (replaced with placeholder for GitHub)